rho <- cor(dados[,2:54])
dados <- read.csv2("BaseMunicipioMensal.csv")
dados <- dados %>%
filter(ano == 2020) %>%
select(-fmun_cod,-ano, -mes,-mes_ano, -regiao, -fase)
dados <- aggregate(.~fmun, data = dados, FUN= sum)
rho <- cor(dados[,2:54])
rho %>%
melt() %>%
ggplot() %>%
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2m label = round(x = value, digits = 3)), size = 4)+
rho <- cor(dados[,2:54])
rho %>%
melt() %>%
ggplot() %>%
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)), size = 4)+
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient(low = "dodgerblue4",
mid = "white",
high = "brown",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
# Instalando pacotes -----------------------
pacotes <- c("tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","pracma",
"polynom","rqPen","ggrepel", "plotly","factoextra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando a base de dados --------------------
dados <- read.csv2("BaseMunicipioMensal.csv")
dados
# Filtrando o ano e descartando algumas variáveis categóricas
dados <- dados %>%
filter(ano == 2020) %>%
select(-fmun_cod,-ano, -mes,-mes_ano, -regiao, -fase)
# Somando as linhas para cada município já que o group_by é um pau no cu
dados <- aggregate(.~fmun, data = dados, FUN= sum)
# Escolhendo as variáveis ------
# Olhando a soma das colunas
teste <- data.frame(mapply(sum,dados[,-1]))
colnames(teste) <- "soma"
teste %>% arrange(desc(soma))
teste <-
teste %>% summarize(total = sum(soma)) %>%
mutate(prop = total/sum(total))
teste[1,]
# Observando a base de dados
dados %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
rho <- cor(dados[,2:54])
# Tentando ver as correlações
chart.Correlation(dados[,2:54])
# Construindo um mapa de calor a partir das correlações
ggploty(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Construindo um mapa de calor a partir das correlações
ploty(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Construindo um mapa de calor a partir das correlações
plotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Construindo um mapa de calor a partir das correlações
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Tentando ver as correlações
ggplotly(chart.Correlation(dados[,2:54]))
# Tentando ver as correlações
ggplotly(chart.Correlation(dados[,2:54]))
# Construindo um mapa de calor a partir das correlações
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Construindo um mapa de calor a partir das correlações
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 1)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Construindo um mapa de calor a partir das correlações
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Instalando pacotes -----------------------
pacotes <- c("tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","pracma",
"polynom","rqPen","ggrepel", "plotly","factoextra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando a base de dados --------------------
dados <- read.csv2("BaseMunicipioMensal.csv")
dados
# Filtrando o ano e descartando algumas variáveis categóricas
dados <- dados %>%
filter(ano == 2020) %>%
select(-fmun_cod,-ano, -mes,-mes_ano, -regiao, -fase)
# Somando as linhas para cada município já que o group_by é um pau no cu
dados <- aggregate(.~fmun, data = dados, FUN= sum)
# Filtrando o ano e descartando algumas variáveis categóricas
dados <- dados %>%
filter(ano == 2020) %>%
select(-fmun_cod,-ano, -mes,-mes_ano, -regiao, -fase)
# Observando a base de dados
dados %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Tentando ver as correlações
chart.Correlationdados[,2:54]
# Construindo um mapa de calor a partir das correlações
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
rho <- cor(dados[,2:54])
# Tentando ver as correlações
chart.Correlationdados[,2:54]
# Construindo um mapa de calor a partir das correlações
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Teste de esferecidade de Bartlet
cortest.bartlett(R = rho)
# Transformando a variavel fmun em indice para rodar a pca pelo pshych
dados_std <- dados %>%
column_to_rownames("fmun") %>%
scale() %>%
data.frame
# Instalando pacotes -----------------------
pacotes <- c("tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","pracma",
"polynom","rqPen","ggrepel", "plotly","factoextra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando a base de dados --------------------
dados <- read.csv2("BaseMunicipioMensal.csv")
dados
# Filtrando o ano e descartando algumas variáveis categóricas
dados <- dados %>%
filter(ano == 2020) %>%
select(-fmun_cod,-ano, -mes,-mes_ano, -regiao, -fase)
# Somando as linhas para cada município já que o group_by é um pau no cu
dados <- aggregate(.~fmun, data = dados, FUN= sum)
knitr::opts_chunk$set(echo = TRUE)
head(dados)
save(dados,file="dados.Rda")
dados %>%
kable_paper() %>%
scroll_box(width = "500px", height = "200px")
dados %>%
kable_paper() %>%
scroll_box()
?kable_paper
# Observando a base de dados
dados %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12) %>%
kable_paper() %>%
scroll_box(width ="500px", height = "200px")
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
rho <- cor(dados[,2:54])
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
cortest.bartlett(R = rho)
cortest.bartlett(R = rho)
options(scipen = 9999)
cortest.bartlett(R = rho)
cortest.bartlett(R = rho)
cortest.bartlett(R = rho)
cortest.bartlett(R = rho)
dados_std <- dados %>%
column_to_rownames("fmun") %>%
scale() %>%
data.frame
# Transformando a variavel fmun em indice para rodar a pca pelo pshych
dados_std <- dados %>%
column_to_rownames("fmun") %>%
scale() %>%
data.frame
afpca <- prcomp(dados_std)
summary(afpca)
# Screeplot
ggplotly(
fviz_eig(X= afpca,
ggtheme = theme_bw(),
barcolor = "black",
barfill = "dodgerblue4",
linecolor = "darkgoldenrod4")
)
pacotes <- c("tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","pracma",
"polynom","rqPen","ggrepel", "plotly","factoextra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando a base de dados --------------------
dados <- read.csv2("BaseMunicipioMensal.csv")
dados
# Preparando os dados ------------------
# Filtrando o ano e descartando algumas variáveis categóricas
dados <- dados %>%
filter(ano == 2020) %>%
select(-fmun_cod,-ano, -mes,-mes_ano, -regiao, -fase)
# Somando as linhas para cada município já que o group_by é um pau no cu
dados <- aggregate(.~fmun, data = dados, FUN= sum)
save(dados,file="dados.Rda")
# Escolhendo as variáveis ------
# Olhando a soma das colunas
teste <- data.frame(mapply(sum,dados[,-1]))
colnames(teste) <- "soma"
teste %>% arrange(desc(soma))
teste <-
teste %>% summarize(total = sum(soma)) %>%
mutate(prop = total/sum(total))
teste[1,]
# Observando a base de dados
dados %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12) %>%
kable_paper() %>%
scroll_box(width ="500px", height = "200px")
dados %>%
kable_paper() %>%
scroll_box()
# Testando a possibilidade de uma PCA ----------
rho <- cor(dados[,2:54])
# Tentando ver as correlações
chart.Correlationdados[,2:54]
# Construindo um mapa de calor a partir das correlações
ggplotly(
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
)
# Teste de esferecidade de Bartlet
cortest.bartlett(R = rho)
# Transformando a variavel fmun em indice para rodar a pca pelo pshych
dados_std <- dados %>%
column_to_rownames("fmun") %>%
scale() %>%
data.frame
afpca <- prcomp(dados_std)
summary(afpca)
afpca$sdev^2
options(scipen = 999)
afpca$sdev^2
